

Overall Info:
-------------------------------------------------------------------
Vue.js:
- variable (1) in js, put it in html, automatically reactive
- components (2) of gui for complicated ones --> 2 main things offered by view
- better than angular which is older
- versatile, can be used from the beginning --> single page application (spa) same page but content change -- or only partially
- Quasar is a framework constructed on view that adds a layer of graphical elements on view (like bootstrap...) and the style of a graphical component android or apple can be changed by changing a boolean
- Command line argument: Quasar init to build layouts, components etc...
- Webpack: produce more compact code, 1 file for all HTTP file to minimize requests, build and reload on save
- Quasar does Webpack for you -- easy deployment
- 1 file .vue that has html, js and css (or stylus or ..)
- Preprocessors for css, sasse (strict super class of css, css code valid in sasse), stylus and less that generates the css
- Quasar uses stylus
- Use visual studio code for quasar development
- Linter hyper strict, warnings and errors for better code 
- Can only use Quasar from the beginning with spa
- Vuex defines a store which is a singleton that contains info accessible from all other components, and getters, and mutations to modify a variable instantly ex: +1, and actions which is an asynchronous mutation ex: HTTP request and when you receive response do smth like future and promises
il y'a de la modularisation pour les stores, acces au modules modularise this.$store.guetters --> dictionnaires entre chaines de characteres et les fonctions qui sont definis par ces chaines de caractere, look at documentation of vuex, peut etre fait dans tout les composants vue car le store est disponible partout, 

template avec boucle sur le dictionnaire dans le store que tu veux, et pour chacune des donnees du store tu creer un element graphique, ex banner to show this warning
- Router: to pass from a page to the other, meaningful imbricated urls

-ts : typescript, javascript with types, and that can compile to any version of js (es4, es5) 


socket.io, server cote backend, tu sais pas ou il est, tu as plusieurs clients dans le frontend, la seule difference c'est que le serveur peut push au client, les client se connectent, se reconnectent s'il y'a un plobleme, et permet d'envoyer des messages typees, sockt.io used in temps reel par example appli de messagerie, le backend doit notifier (push) les users de la reception de ce message sans que eux ils pullent, serveur socket.io cache dans le backend express.use(socket.io) tu lui donne juste une url et a la fin de l'URL il met socket.io et ca c'est l'url sur lequel le front-end ce connecte. le front-end essaye et reessaye de se connecter, une fois connecte il peu emit au backend


javascript, vue documentation, vuex (plugin for vue), socket.io

-only http requests when clicking links, we want pages with infinite scrolls -- http request each time you reach the end of the page, ajax or xml-http smth allows HTTP requests from js, for the web browser to allow ajax requests in the js code, it asks the server if it allows ajax (CORS), then if it doesn't respond then  the server is what you have to change 

-socket.io alows persistent connections like TCP sockets, HTTP requests are also TCP but not persistent, it also allows the server to push info to the client instead of the client pulling, socket.io is just this specification, frontend in js and backend in js, java, ...

- can put a socket.io code code in a Quasar component, a div in the html
-------------------------------------------------------------------

svcoud_driverapp project structure:(src folder)
-------------------------------------------------------------------
1- assets and statics: created by default by the Quasar app, used to store images and other resources
2- boots: modules to be installed before vue is started, axios is a plug-in to do HTTP requests
3- i18n: Internationalization (i18n) is the process of developing products in such a way that they can be localized for languages and cultures easily.
4- components: all the Vue components are defined here
5- config: created by Yves, contains specifications of needed configurations
6- css: global styl files for the entire app as opposed to css declarde in style balise inside components
7- data: created by Yves, contains contracts.js, aprogram that creates streams and frtchs data from the cloud, not for us to touch, Yves does this
8- helpers: created by Yves, contains a fct that requires users to be authenticated otherwise they are redirected to login page, not for us to touch
9- layouts: The HTML code that defines is in the root and that includes a page, and that page will include components. Currently we have one layout for the login and one for the traffic light, which layout and which pages to use is defined in the router file
10- pages: We only have one page for now that displays the traffic light
11- router: defines all the routes for the pages
12- store: Centralized gestion of data with Singletons, we currently have three stores, each store has:
actions, that are asynchronous: ex using axios to ussue an HTTP POST request and when receiving data back do smth --> make calls to mutations using store.commit and use them in an asynchronous way
mutations, there are only two updateToken and removeToken: authentification avec du jwt
state, defines what exactly the store contains: userId, the jwt token, the expiration date of the jwt token and the endpoints
guetters, that allow access to some of the data
All store that we want to use should be declared in index.js
--------------------------------------------------------------------

Components of a Vue file (component):
-------------------------------------------------------------------
1-template: html template of the component
2-script: Javascript code related to the component
3-style: css of the component
-------------------------------------------------------------------

What I am supposed to do:
-------------------------------------------------------------------


 