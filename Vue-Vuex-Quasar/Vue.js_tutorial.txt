Vue.js Tutorial

0. Project structure:
index.html
css
    style.css
    reset.css
js
    app.js
    components
        Tweets.js

1- Front-end Frameworks:
- Front-end: Part of the app the user will see, nicely designed and easy to interact with
-Back-end: where all data is stored and wher our requests are processed
- Front-end Frameworks: Javascript libraries that allow you to build complex web apps Front-end with relative ease, they include shortcuts for common Front-end features and optimization of front-end code (starting at 9-)

2- Adding Vue:
- Add the following:
// in index.html <head>
<script src="https://cdn.jsdelivr.net/npm/vue/dist/vue.js" defer></script>
- Our project now has access to the Vue library. This gives us access to all of the code that will allow us to make Vue apps, web front-ends built using Vue.
- defer: We use the defer attribute on the <script> tag to make sure that the page is loaded and ready to hook up to Vue before we actually load Vue.

3- Building a Vue app:
- Constructor: Adding Vue gives us access to a Vue class, that can be instanciated with the constructor (new keyword) to create an app, this constuctor only takes one argument
- The Argument of the constructor (the options object): one object called the options object, and each piece of information the Vue app needs to function is added to the options object as a key-value pair. You can add as many key-value pairs as you need.

4- el (key in the options object):
- Goal: In making a new Vue app, we gain access to all of the powerful features Vue has to offer. However, we don’t necessarily want all of our HTML to have access to these features. We need to specify to our Vue app which portion of our HTML we want to gain access to our Vue app’s logic
- How: We do this by adding a key-value pair to the Vue app’s options object. We add a key called el, standing for HTML element, with a value of a CSS selector as a string that will target an element in our HTML and give it access to our Vue app’s functionality.
- Example: 
// In app.js
const app = new Vue({
  el: '#app'
});
In the above example, we wanted an HTML element with an ID of app to gain access to our Vue app’s functionality. We added an el key to the options object and made the value '#app', a CSS selector that will target an element with an ID, #, of app.
- We then import this JavaScript file into our HTML file so that our Vue app can find the specified HTML element and turn it into a Vue app.
//in index.html <head>, but after adding Vue.js, we defer to ensure Vue.js is fully loaded
<script src="./js/app.js" defer></script>
//in index.html <body>
<div id="app">
    <!-- Vue App HTML Code -->
</div>
- This last div is now turned into a Vue app

5 & 6- data (key or property in the options object): Displaying dynamic data (e.g. likes on social media, data that can change at any moment)

To display dynamic information we need:

a- A place to store the data we will be displaying
- All of our dynamic data will need to be specified in our options object at a property called data.
- Apps need to display many pieces of dynamic data. To accommodate this, the value of data is an object as well. Every piece of data will be added to the data object as a key-value pair.
- Example:
const app = new Vue({
  el: '#app',
  data: {
    username: 'CoderInTraining',
    newTweet: '',
    tweets: [
      'Started learning to code today. Wish me luck!', 
      'Okay, I learned HTML, CSS, and JavaScript. But, how do I combine them together?? Send help.', 
      'Today I start learning Vue. I got this.'
    ]
  }
});
b- A syntax for displaying that dynamic (always changing) information stored in the data property of our app:
- Templates: Vue makes use of templating meaning that the developer specifies certain content in our HTML called a template that isn’t meant to be displayed literally but rather substituted out with the appropriate data from the app.
- How? We specify which content inside our HTML should be substituted by surrounding it in two layers of curly brackets, like so:
-Example: 
//inside <body> of index.html
<div id="app">
  <h2>Hello, {{ username }}</h2>
</div>
In this example, {{ username }} will be filled in with the value of username from the Vue app’s .data object when the page is rendered to the user. If the value of username changes, the value displayed to the user will be changed as well.
- Summary: Whenever you want to display information from the Vue app’s data, you wrap the name of the .data property in two sets of mustaches (curly brackets) and the expression will be replaced with the Vue data information for the end user to see.

7-Directives:
- Definition: Directives are custom HTML attributes built into Vue that accomplish incredibly complex, common front-end operations using barely any code.
- Examples: 
a- conditionally display an element (button here). We can add a v-if directive as an attribute to HTML elements like so:

<button v-if="userIsLoggedIn">Log Out</button>
<button v-if="!userIsLoggedIn">Log In</button>

b- render an array of items identically. We can use v-for as an attribute, like so:

<div class="tweets">
      <div class="tweet" v-for="tweet in tweets">
        <h3>{{ username }}</h3>
        <p>{{ tweet }}</p>
      </div>
</div>

or like here: 

<ul>
  <li v-for="todo in todoList">{{ todo }}</li>
</ul>

v-for will iterate through every item in our .data‘s todoList array, create a variable called todo containing each succesive array element, and create an li displaying each element in the list. Even if a new item is added to the list, the list will be re-rendered instantly to display that new item

PS: ul means unordred list, and li means list items

c- capture user input and hook it up to data in our app. We use v-model attribute:

<label for="username">Username</label>
<input type="text" value="username" placeholder="Username" v-model="username" />

The above input field will display the current value of username on the Vue app’s data object and will change the value of username if the user modifies the value in the field. 

d- Fire event on click of a button: v-on:click takes JavaScript code as its value. Whenever the element is clicked, the provided code will run, using the Vue app’s data for relevant values.

e- bind a component prop to the am element of the Vue app data object: use v-bind in the opening tag of a Vue component we defined, see components section.
The name of the value after the : is the prop that will be receiving the value. The value of v-bind (the name in quotes) is the data value we will be using to set that prop’s value.
We use v-bind like this:

<component_name v-bind:props_element_name="data_element_name"></component_name>

Example:
<tweet v-for="tweet in tweets" v-bind:message="tweet" v-bind:author="username"></tweet>

--> All Vue Directives start with v-, are placed inside the opening tag of HTML elements, can be combined and a list of all of them can be found here: https://vuejs.org/v2/api/#Directives, if there isn't a directive that can do what you want then you can even create your own directives, this is skipped here.

8- Components:
- Definitions: custom reusable html elements
- Creating a component:
+ Where? in a js file (ex Tweet.js) that you import using 
// in index.html inside <head>
<script src="./js/components/Tweet.js" defer></script>  
+ Elements:
a- name: The name of the component you are Creating
b- an options object containing:
    ba- props: array of pieces of dynamic info the component can receive (by binding pieces f date from the app to these in the opening tag of an HTML element, see later) to be used to fill its template
    bb- template: a template that should be rendered whenever the component is used in HTML
- Using a component:
v-bind takes a value from the Vue app’s data object and uses it as the value of the specified component prop.


+ Example 

// in Tweet.js, creating a component
const Tweet = Vue.component('tweet', {
 props: ['message', 'author'],
 template: '<div class="tweet"><h3>{{author}}</h3><p>{{ message }}</p></div>'
});

This creates a new component called tweet that takes in two props called message and author and displays it using the supplied template. Notice the mustache expression containing the props to be evaluated.


// in index.html, using a component
<div class="tweets">
      <tweet v-for="tweet in tweets" v-bind:message="tweet" v-bind:author="username"></tweet>
</div>

In this example, we use v-bind to set the value of the prop message on the tweet component instance, <tweet>, to be the Vue app data‘s value of tweet. We also set the prop author to be the Vue app data's value of username.

10- Virtual DOM:
- What is a DOM?
DOM stands for Document Object Model, which is a representation of a webpage created and stored by the user's browser. The browser takes the html, transforms it into a DOM and then paints the DOM on the user's screen.


