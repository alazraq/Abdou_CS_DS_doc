Software Engineering Best Practices
###################################

Following are some good sofetware engineering practices for team projects in a prodoction oriented setting:

#. Use git and the GitFlow workflow.
#. Use semantic versioning (see :ref:`semantic_versioning`).
#. Document a lot (see :ref:`service_documentation`).

Following good practices are **highly recommended**:

#. Use code reviews before merging to `dev` and `release` branches. A `release` branch is 
#. Use automated testing and deployment (for example by using Bitbucket pipelines).
#. Use automatic style checking tools.

.. _semantic_versioning:

Semantic Versioning
*******************

From the official `semantic versioning website <https://semver.org/>`_:

Given a version number MAJOR.MINOR.PATCH, increment the:

* MAJOR version when you make incompatible API changes,
* MINOR version when you add functionality in a backwards-compatible manner, and
* PATCH version when you make backwards-compatible bug fixes.

.. _folder_organization:

Folder Organization
*******************

When creating a project it is recommended to create the following folder structure:

.. code-block::

  build/              Files generated by building the repo. This folder should be gitignored
                      Deleting this folder should be benin
    docs/             Documentation extracted from the code
  docker/             Dockerfiles to create docker images of the service
  kubernetes/         K8s resource declaration files
  src/                Contains the code
    [sourceset]/      One folder per source set, e.g. main, test, integrationTest
      [language]/     The language used, e.g. python or scala
      resources/      Contains non-code files required by the code of this source set
  README.md           A brief explanation of the repo (should at least point to the doc)

.. _service_documentation:

Documenting a service
*********************

Here we suppose that the project is composed of multiple services.
Typically, a single service will have two documentations:

- *general*: High-level overview of what the service does and how it is implemented.
  This documentation should be written in a ``documentation`` repository.
  This should contain an overview of the service, instructions for CI/CD and deployments, and tutorials if some are needed.

- *code*: Low-level code documentation for classes, packages, functions, variabes, etc.
  This documentation should be placed inside a ``build/docs/`` folder in the service's repository.

.. _code_documentation:

Writing Code Documentation
==========================

Document your code using standard documentation practices for the programming language you use.
The automated documentation tool should extract the documentation to a folder which is gitignored, e.g. ``build/docs/``.

At the root of the project, create a ``docs/`` folder.
This folder will be used as the root of the documentation uploaded to the cloud (Google App Engine for example).
You should not place the actual documentation inside it!
Automated tools will compile the documentation and copy it from a gitignored folder to the ``docs/`` folder instead.

Then you can set up pipelines on the service hosting you code to deploy the documentation, for example using a BitBucket pipeline to:

#. Automatically copy the content of your documentation, e.g. ``build/docs/scaladoc/`` folder into a subfolder of ``docs/``, like ``docs/scaladoc/``.
#. Create the correct documentation version.
#. Push the content of ``docs/`` to the cloud (Google App Engine for example) using the correct version.

READMEs
=======

To make it easy to get started with a repository, add a ``README.md`` at the root of the project containing some useful information.


